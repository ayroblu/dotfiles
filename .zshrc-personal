# Personal setup
# Also consider reviewing:
# https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html

# https://stackoverflow.com/a/34143401
exists() {
  command -v "$1" >/dev/null 2>&1
}

# ---------- Aliases
alias ls='ls -A'
# macos doesn't auto sort by CPU
alias top='top -o cpu'
alias e='emacs'
alias mv='mv -i'
alias vi='vim'
alias vis='vi -c OpenSession'
alias mvis='mvim -c OpenSession'
alias viallnotes='vi ~/Dropbox/Documents/twitter/*.md ~/Dropbox/Notes/*.md'
alias goctave='\octave -q'
[ -x "$(command -v octave)" ] && alias octave='octave -W -q'
[ -x "$(command -v rg)" ] && [ -x "$(command -v ctags)" ] && alias maketags="rg --files | ctags --links=no --excmd=number -L-"
[ -x "$(command -v rg)" ] && alias rg="rg --hidden --glob \"!tags\" --glob \"!.git\" -M 1000"

# Editing aliases
alias vivim='vi ~/.vimrc'
alias vitmux='vi ~/.tmux.conf'
alias vibash="vi ~/.bashrc*"
alias vizsh="vi ~/.zshrc*"
alias vigit="vi ~/.gitconfig*"

# Proxy stuff
alias proxywifion='sudo networksetup -setsocksfirewallproxystate Wi-Fi on' #on / off
alias proxywifioff='sudo networksetup -setsocksfirewallproxystate Wi-Fi off' #on / off

alias gulp='TS_NODE_TRANSPILE_ONLY=true npx gulp'

# ------------ Functions

function nzproxy {
  ssh -ND 9876 mezap &
  proxywifion
  # wut: https://superuser.com/questions/555874/zsh-read-command-fails-within-bash-function-read1-p-no-coprocess
  read "?Press enter to turn off proxy: "
  proxywifioff
  fg
}

# Use lf to switch directories and bind it to ctrl-o
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' 'lfcd\n'

# Function to show colours
function show_colours {
  for i in {0..255}; do printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" $i ; if ! (( ($i + 1 ) % 8 )); then echo ; fi ; done
}

# https://stackoverflow.com/a/50830617/6725059
function cd() {
  builtin cd "$@"

  if [[ -z "$VIRTUAL_ENV" ]] ; then
    ## If env folder is found then activate the vitualenv
      if [[ -d ./env ]] ; then
        source ./env/bin/activate
      fi
  else
    ## check the current folder belong to earlier VIRTUAL_ENV folder
    # if yes then do nothing
    # else deactivate
      parentdir="$(dirname "$VIRTUAL_ENV")"
      if [[ "$PWD"/ != "$parentdir"/* ]] ; then
        deactivate
      fi
  fi
}

regexReplace() {
  # Requires ripgrep: https://github.com/BurntSushi/ripgrep
  BEFORE="$1"
  AFTER="$2"
  DIR="$3"
  # Note, not sure the parameter expansion works outside of zsh
  rg --pcre2 "$BEFORE" --files-with-matches "$DIR" | xargs perl -i -pe "s/${BEFORE/\/\\//}/$AFTER/g"
}

# https://askubuntu.com/questions/113544/how-can-i-reduce-the-file-size-of-a-scanned-pdf-file (2nd answer)
shrinkpdf() {
  INPUT="$1"
  OUTPUT="${INPUT:r}-compressed.pdf"
  # -dQUIET
  gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook \
    -dNOPAUSE -dBATCH -sOutputFile="$OUTPUT" "$INPUT"
  ## Much faster
  # ps2pdf -dPDFSETTINGS=/ebook "$INPUT" "$OUTPUT"
  ## Also much faster:
  # gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dDownsampleColorImages=true \
  #   -dColorImageResolution=150 -dNOPAUSE  -dBATCH -sOutputFile="$OUTPUT" "$INPUT"
}

# https://stackoverflow.com/questions/2507766/merge-convert-multiple-pdf-files-into-one-pdf
mergepdf() {
  gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="${@: -1}" "${@:1:-1}"
}

# Also consider using ocrmypdf if you want to search it
# https://unix.stackexchange.com/questions/301318/how-to-ocr-a-pdf-file-and-get-the-text-stored-within-the-pdf

# --------------------- fzf completion?
# Checkout the .fzf.zsh -> /usr/local/opt/fzf/shell/key-bindings.zsh for more info
# https://feltrac.co/environment/2020/01/18/build-your-own-shell-completion.html
# Downfalls - can't do context aware (how do I figure out the cmd line? Perhaps $@?
if exists fzf; then

  # More in the .zshrc-fzf

  ## Completion triggers with ^F
  # This removes the ** requirement, so can tab on random space to get auto complete
  #export FZF_COMPLETION_TRIGGER=''
  # If you've ever set the trigger in the past, just removing it is not enough, need to unset
  unset FZF_COMPLETION_TRIGGER
  fzf-completion-notrigger() {
    FZF_COMPLETION_TRIGGER='' fzf-completion
  }
  zle -N fzf-completion-notrigger
  bindkey '^F' fzf-completion-notrigger
  _fzf_complete_git_notrigger() {
      FZF_COMPLETION_TRIGGER='' _fzf_complete_ssh
  }
  #bindkey '^I' $fzf_default_completion
  #bindkey '^I' expand-or-complete
  #### supported command prefixes: ####
  # Most commands: files
  # cd: directories
  # kill: processes
  # ssh, telnet: hosts
  # unset, export: env vars
  # unalias: aliases
  ## For files and directories
  _fzf_compgen_path() {
    #fd --hidden --follow --exclude ".git" . "$1"
    rg --files --hidden --glob "!.git" "$1"
  }
  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }

  ## FZF setup variables - use git ls-files cause it's way faster
  default-fzf-cmd() {
    git ls-files 2> /dev/null || rg --files --hidden --glob "!.git" -M 200 2> /dev/null
  }
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  #Can't use default-fzf-cmd because no functions in vim
  #export FZF_DEFAULT_COMMAND='default-fzf-cmd'
  exists rg && export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git" 2> /dev/null'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  #export FZF_CTRL_T_COMMAND='default-fzf-cmd'
  export FZF_DEFAULT_OPTS="--height 60% --reverse --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort' --bind 'up:preview-up,down:preview-down,ctrl-d:preview-page-down,ctrl-u:preview-page-up,ctrl-f:half-page-down,ctrl-b:half-page-up,ctrl-e:toggle-preview'"
  export FZF_CTRL_T_OPTS="--preview 'bat --style=numbers --color=always {} | head -500'"
  # Support alt-c for changing directory
  bindkey "รง" fzf-cd-widget

  fzf-dir() {
    # fzf "$@" --preview 'tree -C {} | head -200'
    _fzf_compgen_dir . |
      fzf-down --ansi --multi --no-sort --preview-window right:50% \
        --preview 'tree -C {} | head -'$LINES
  }
  fzf-dir-widget() {
    local result=$(fzf-dir | join-lines)
    zle reset-prompt
    LBUFFER+=$result
  }
  zle -N fzf-dir-widget
  bindkey '^x' fzf-dir-widget

  fzf-yank-history-widget() {
    local selected num
    setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
    selected=( $(fc -rl 1 |
      FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
    local ret=$?
    echo ${selected:1} | pbcopy
    echo yanked "'"${selected:1}"'"
    # if [ -n "$selected" ]; then
    #   num=$selected[1]
    #   if [ -n "$num" ]; then
    #     zle vi-fetch-history -n $num
    #   fi
    # fi
    zle reset-prompt
    return $ret
  }
  zle     -N   fzf-yank-history-widget
  bindkey '^Y' fzf-yank-history-widget



  # (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function
  # - The first argument to the function is the name of the command.
  # - You should make sure to pass the rest of the arguments to fzf.
  _fzf_comprun() {
    local command=$1
    shift

    case "$command" in
      cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
      export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
      ssh)          fzf "$@" --preview 'dig {}' ;;
      # I tried aliases, didn't seem to work, not sure why - guessing it's not pulling the context (subshell?)
      *)            fzf "$@" ;;
    esac
  }


  ## Git shortcuts
  # Initial copy from:
  # https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
  # https://junegunn.kr/2016/07/fzf-git/

  is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
  }

  fzf-down() {
    fzf --height 50% "$@" --border
  }

  fzf_gf() {
    is_in_git_repo || return
    git -c color.status=always status --short |
    fzf-down -m --ansi --nth 2..,.. \
      --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
    cut -c4- | sed 's/.* -> //'
  }

  fzf_gb() {
    is_in_git_repo || return
    git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' |
    fzf-down --ansi --multi --no-sort --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" {} | head -'$LINES |
    sed 's#^remotes/##'
  }

  fzf_gt() {
    is_in_git_repo || return
    git tag --sort -version:refname |
    fzf-down --multi --preview-window right:70% \
      --preview 'git show --color=always {} | head -'$LINES
  }

  fzf_gh() {
    is_in_git_repo || return
    git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
    fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
      --header 'Press CTRL-S to toggle sort' \
      --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
    grep -o "[a-f0-9]\{7,\}"
  }

  fzf_gr() {
    is_in_git_repo || return
    git remote -v | awk '{print $1 "\t" $2}' | uniq |
    fzf-down --tac \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
    cut -d$'\t' -f1
  }
  join-lines() {
    local item
    while read item; do
      echo -n "${(q)item} "
    done
  }

  bind-git-helper() {
    local c
    for c in $@; do
      eval "fzf-g$c-widget() { local result=\$(fzf_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
      eval "zle -N fzf-g$c-widget"
      eval "bindkey '^g^$c' fzf-g$c-widget"
    done
  }
  # Remove default
  bindkey -r "^G"
  # Files, Branches, Tags, Remotes, commit Hashes
  bind-git-helper f b t r h
  unset -f bind-git-helper

fi
# --------------------- end
