" ---------------------------------------- Personal Help
function ShowPersonalHelp()
  let l:text = GetPersonalHelpText()

  vnew
  0pu=l:text
  setlocal buftype=nowrite
  setlocal nomodifiable
  set ft=markdown
  execute 0
endfunction

function GetPersonalHelpText()
  let l:text = "# <leader>? for this help
    \\n align: <visual> ga=
    \\n Close all buffers: :bufdo bd
    \\n Spelling: <leader>s ]s [s ]S [S
    \\n <insert> <c-u> to undo in insert mode
    \\n <leader>o to open the tagbar
    \\n <leader><leader>f<char> easy motion find (F for reverse)
    \\n <leader>u to open links under the cursor
    \\n :BufDelete to interactively close buffers
    \\n :BufOnly for closing all except current buffer
    \\n <leader>yp for yanking the path
    \\n
    \\n ## text-obj
    \\n if, af for function
    \\n ci,w for camel case
    \\n cia for argument
    \\n ai,ii,aI, iI for indentation
    \\n
    \\n ## Undo Tree
    \\n g-, g+ to jump between undo tree branches
    \\n :earlier 5s - 5m, 5h, 5d, also :later
    \\n
    \\n ## netrw:
    \\n gn for changing root
    \\n <c-s-6> for returning to writing buffer
    \\n
    \\n ## fzf:
    \\n <leader>t to fzf show files
    \\n <leader><leader>t to fzf show tags
    \\n <leader><leader>r to fzf show tags in current buffer
    \\n `:Rg query` to search with ripgrep
    \\n
    \\n ## repl + code execution:
    \\n <leader>e: Run lines and output (selection or whole file)
    \\n <leader>w: Run repl and push lines (selection or current line)
    \\n <leader>q: Close repl
    \\n <leader>p: Select pane target
    \\n
    \\n ## vim-exchange
    \\n cxc to cancel
    \\n
    \\n ## Abolish
    \\n crs - coerce_snake_case
    \\n crm - MixedCase
    \\n crc - camelCase
    \\n cru - UPPER_CASE
    \\n cr- - dash-case
    \\n cr. - dot.case
    \\n cr<space> - space case
    \\n crt - Title Case
    \\n :%Subvert/facilit{y,ies}/building{,s}/g
    \\n
    \\n ## coc.nvim
    \\n [[ for previous error
    \\n ]] for next error
    \\n gd go definition
    \\n gy go type definition
    \\n gi go implementation
    \\n gr go references
    \\n K Show docs
    \\n <leader>ac action (like imports)
    \\n :call popup_clear()
    \"
  if &filetype ==# 'python'
    let l:shell_command .= "\n## python:
      \\n <leader>r to rename
      \\n <c-}> to go to definition
      \\n K to show documentation
      \\n <leader>i to try auto imports
      \\n <leader>n to show usages (<leader>b to close)
      \\n <leader>g to go to assignment (low use)
      \\n :AFlake to remove unused imports (requires autoflake)
      \"
  endif
  if &filetype ==# 'markdown'
    let l:shell_command .= "\n## markdown:
      \\n Generate markdown: :GenTocGFM
      \"
  endif
  return l:text
endfunction

" ---------------------------------------- Main layout

set shiftwidth=2
set softtabstop=2
set tabstop=2

set number
set expandtab
" help foldtext, disable and `set fillchars?` to see default
set fillchars=vert:\|
set cursorline mouse=a
hi CursorLine   cterm=bold,underline ctermbg=NONE ctermfg=NONE guibg=blue guifg=orange "Set cursor line highlight colours
set splitright splitbelow
set scrolloff=1
set smartindent
set lazyredraw "perf
set nobackup " swap files are relatively pointless
set noswapfile " swap files are relatively pointless
set tabpagemax=100 "normally 10
set relativenumber
set autoread "detect if file has changed
set display+=lastline "long lines show to the end instead of @ sign
set complete+=kspell " autocomplete includes the dictionary if enabled
"set synmaxcol=1000 " Stop trying to syntax highlight after synmaxcol characters. Vim is very slow with syntax highlighting long lines

set foldmethod=syntax
set foldlevel=20

set updatetime=1000 "event when cursor stops moving for a second, for swp normally, but now is for checktime call below
" Ignore case except when there atleast one capital, use \C for case sensitive
" Position of \c / \C is irrelevant
set ignorecase
set smartcase

" Always report the number of lines changed by a command
set report=0

" Sentances that end in period join with 1 space, not two
set nojoinspaces

" Default to 99 so that `gq` wraps at 100
"set textwidth=99

" Display as much as possible of cut off lines rather than truncating
"set display=lastline

" Don't automatically add eol characters, e.g. for autogenerated files
set nofixeol

" https://stackoverflow.com/questions/26708822/why-do-vim-experts-prefer-buffers-over-tabs
set hidden " can switch to another buffer when you have unsaved changes

" Tab completion, as much as possible, list options, then tab through each option
"set wildmode=longest,list,full
"set wildmenu

" Maintain undo history between sessions
" https://jovicailic.org/2017/04/vim-persistent-undo/
" https://stackoverflow.com/questions/1549263/how-can-i-create-a-folder-if-it-doesnt-exist-from-vimrc
if !isdirectory($HOME.'/.vim/nundodir')
  call mkdir($HOME.'/.vim/nundodir', 'p')
endif
set undodir=~/.vim/nundodir
set undofile

" Set spelling settings, use ]s [s for next previous spelling error, zg to add
" to spellfile, z= to see similar words
" Includes all the regions such as en_us en_nz
set spelllang=en
set spellfile=~/.spellfile.utf-8.add
" set spellsuggest=double " if you want to use a super slow but phoentic
" version v normal just edit distance

" Encryption method, defaults to super weak
"set cryptmethod=blowfish2

" Project vimrcs: https://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc

" Add characters for tabs and spaces on the end of lines
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:·,extends:>,precedes:<,nbsp:+
endif
set list

" Turns off the bell (audible)
"set visualbell t_vb=
" sets default font to what is in macos terminal
"set guifont=Monaco:h12
" No blinking cursor
"set guicursor+=a:blinkon0
" Randomly pulled from https://github.com/lifepillar/vim-solarized8/issues/45
" cause defaults aren't good
"let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5',
"      \ '#002b36', '#cb4b16', '#93a1a1', '#839496', '#657b83', '#6c71c4', '#586e75', '#fdf6e3']

let mapleader=' '

" ---------------------------------------- netrw

" netrw is kinda a plugin? Makes it a tree FYI
" https://shapeshed.com/vim-netrw/#nerdtree-like-setup
" Probably can remove vim-vinegar in favour of personalised setup
let g:netrw_liststyle = 3
let g:netrw_banner = 0
"let g:netrw_browse_split = 4
let g:netrw_winsize = 25
let g:netrw_preview = 1
"let g:netrw_altv = 1
let g:netrw_alto = 0
nnoremap - :call OpenNetrw()<cr>
"nnoremap - :Ex<cr>
function! OpenNetrw()
  let file = '\V'.expand('%:t')
  execute 'Ex'
  call search(file)
endfunction
autocmd FileType netrw nnoremap <buffer> P <c-w>z
" https://vi.stackexchange.com/questions/14622/how-can-i-close-the-netrw-buffer
autocmd FileType netrw setl bufhidden=wipe
"let g:netrw_fastbrowse = 0
autocmd FileType netrw nmap <buffer> h -
autocmd FileType netrw nmap <buffer> l gn
autocmd FileType netrw nmap <buffer> v i:Vifm<cr>

" ---------------------------------------- Mappings
" set spell spelllang=en_nz " ]s [s ]S [S " next spelling error
nnoremap <Leader>s :setl spell!<CR>

" Show help we defined above
nnoremap <leader>? :call ShowPersonalHelp()<cr>

imap jj <Esc>l
imap jk <Esc>l

" movement in insert mode is nice to have
imap <c-l> <right>
imap <c-h> <left>
imap <c-j> <down>
imap <c-k> <up>

" https://stackoverflow.com/questions/15808767/vimrc-to-detect-remote-connection
let g:localSession = ($SSH_CLIENT == "")

" HOC for calling system with interactive flags which have the shell rc files
function Isystem(a, ...)
  if !g:localSession
    set shellcmdflag=-ic
  endif
  let l:res = ""

  if a:0 == 1
    let l:res = system(a:a, a:1)
  else
    let l:res = system(a:a)
  endif
  if !g:localSession
    set shellcmdflag=-c
  endif
  return l:res
endfunction

" copy and pasting
vnoremap <C-c> y:call Isystem("pbcopy", getreg("\""))<CR>
nnoremap <C-v><C-v> :call setreg("\"", Isystem("pbpaste"))<CR>p

" Highlight rows and columns with \l and \c, 'l to move, :match to remove
" highlighting
"nnoremap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>
"nnoremap <silent> <Leader>c :execute 'match Search /\%'.virtcol('.').'v/'<CR>

"Tab mappings
" tab navigation like firefox
nnoremap {         :tabprevious<CR>
nnoremap }         :tabnext<CR>
"nnoremap <C-t>     :tabnew<CR>
"inoremap <C-{>     <Esc>:tabprevious<CR>
"inoremap <C-}>     <Esc>:tabnext<CR>
"inoremap <C-t>     <Esc>:tabnew<CR>
nnoremap (         :tabmove -1<cr>
nnoremap )         :tabmove +1<cr>

" Window mappings (use alt hjkl)
nnoremap ˙ <C-w>h
nnoremap ∆ <C-w>j
nnoremap ˚ <C-w>k
nnoremap ¬ <C-w>l

" Incrementing and decrementing visual blocks
" https://stackoverflow.com/questions/23481635/how-to-use-vims-normal-mode-ctrl-a-number-increment-in-visual-block-mode
xnoremap <C-a> :<C-u>let vcount = v:count ? v:count : 1 <bar> '<,'>s/\%V\d\+/\=submatch(0) + vcount <cr>gv
xnoremap <C-x> :<C-u>let vcount = v:count ? v:count : 1 <bar> '<,'>s/\%V\d\+/\=submatch(0) - vcount <cr>gv

" show errors if you want (need to work out how to show automatically)
nmap <c-l> :lwindow<cr>

" Scroll mappings
map <ScrollWheelUp> <C-Y>
map <ScrollWheelDown> <C-E>

" This is just annoying
noremap K k
"autocmd FileType c,cpp nunmap <buffer> K

" Disable smart indenting for these langauges
autocmd FileType yaml setl indentexpr=
autocmd FileType html setl indentexpr=
autocmd FileType make setl indentexpr=
autocmd FileType sh setl indentexpr=
autocmd FileType scala setl indentexpr=
autocmd FileType swift,objc,objcpp setl textwidth=0

" Handle special file types: https://vim.fandom.com/wiki/Forcing_Syntax_Coloring_for_files_with_odd_extensions
"autocmd BufNewFile,BufRead PROJECT set syntax=yaml

" nnoremap <C-L> :redraw!

" delete without yanking
"nnoremap d "_d
"vnoremap d "_d
" replace currently selected text with default register
" without yanking it
xnoremap p "_dP

" Moving cursor by display lines
" -  http://vim.wikia.com/wiki/Move_cursor_by_display_lines_when_wrapping
"noremap  <buffer> <silent> k gk
"noremap  <buffer> <silent> j gj
"noremap  <buffer> <silent> 0 g0
"noremap  <buffer> <silent> $ g$

" diffget for mergetool left and right is also local and remote
" 1do is equivalent to :diffget LO, 2do is equivalent to :diffget BA, etc.
"nnoremap <buffer> dgl :diffget LO<cr>
"nnoremap <buffer> dgr :diffget RE<cr>

" Yank current file path
nnoremap yp :let @" = expand("%:p")<CR>

" Insert single character
nnoremap s :exec "normal i".nr2char(getchar())."\el"<CR>
nnoremap S :exec "normal a".nr2char(getchar())."\el"<CR>

" https://stackoverflow.com/questions/40289706/execute-selection-from-script-in-vim
"autocmd FileType rust xnoremap <buffer> <leader>e :w !echo 'fn main() {' "$(cat)" '}' > __temp.rs && cargo script __temp.rs; \rm __temp.rs<cr>
"autocmd FileType rust xnoremap <buffer> <leader><leader>e :w !echo "$(cat)" > __temp.rs && cargo script __temp.rs; \rm __temp.rs<cr>

" ---------------------------------------- Allow undo in insert mode
inoremap <c-u> <esc>ua
" https://vi.stackexchange.com/questions/16773/how-to-undo-the-deletion-of-characters-in-insert-mode-caused-by-ctrl-u
" Break on cr so that you can undo an enter with indenting
inoremap <cr> <c-g>u<cr>

" --------------- from https://sanctum.geek.nz/arabesque/vim-annoyances/
" always middle on next, needs to be remaped as per plugin FYI, see below
" (anzu), but the zz removes the anzu output so this does nothing for now
nnoremap N Nzz
nnoremap n nzz

" Disable Ex mode on Q
nnoremap Q <nop>
"nnoremap K <nop> " already remaped elsewhere

" ---------------------------------------- Reload page on change
"Before
"au CursorHold * checktime
"After with https://vi.stackexchange.com/questions/14315/how-can-i-tell-if-im-in-the-command-window
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if !bufexists("[Command Line]") | checktime | endif

" ---------------------------------------- Functions and commands
" https://vim.fandom.com/wiki/Customize_text_for_closed_folds
" Set a nicer foldtext function
set foldtext=MyFoldText()
function! MyFoldText()
  let line = getline(v:foldstart)
  if match( line, '^[ \t]*\(\/\*\|\/\/\)[*/\\]*[ \t]*$' ) == 0
    let initial = substitute( line, '^\([ \t]\)*\(\/\*\|\/\/\)\(.*\)', '\1\2', '' )
    let linenum = v:foldstart + 1
    while linenum < v:foldend
      let line = getline( linenum )
      let comment_content = substitute( line, '^\([ \t\/\*]*\)\(.*\)$', '\2', 'g' )
      if comment_content !=# ''
        break
      endif
      let linenum = linenum + 1
    endwhile
    let sub = initial . ' ' . comment_content
  else
    let sub = line
    let startbrace = substitute( line, '^.*{[ \t]*$', '{', 'g')
    if startbrace ==# '{'
      let line = getline(v:foldend)
      let endbrace = substitute( line, '^[ \t]*}\(.*\)$', '}', 'g')
      if endbrace ==# '}'
        let sub = sub.substitute( line, '^[ \t]*}\(.*\)$', '...}\1', 'g')
      endif
    endif
  endif
  let n = v:foldend - v:foldstart + 1
  let info = ' ' . n . ' lines'
  let sub = sub . repeat(' ', winwidth(0))
  let num_w = getwinvar( 0, '&number' ) * getwinvar( 0, '&numberwidth' )
  let fold_w = getwinvar( 0, '&foldcolumn' )
  let sub = strpart( sub, 0, winwidth(0) - strlen( info ) - num_w - fold_w - 2 )

  return sub . info
endfunction
autocmd FileType vim setl foldexpr=GetLineFold(v:lnum)

" Inspiration: https://vi.stackexchange.com/questions/3814/is-there-a-best-practice-to-fold-a-vimrc-file
function! GetLineFold(lnum)
  if getline(a:lnum) =~? '\v^.*-{5}'
    return '>1'
  endif
  if getline(a:lnum) =~? '\v^.*[=]{3}'
    return '>2'
  endif
  return '='
endfunction

" For profiling:
function Prof()
  profile start profile.log
  profile func *
  profile file *
endfunction

function EndProf()
  profile pause
  noautocmd qall!
endfunction
command! Prof :call Prof()
command! EndProf :call EndProf()
" https://vi.stackexchange.com/questions/19337/is-there-a-way-to-tell-what-autocmds-have-run

" Delete current file:
command! DeleteFile :call delete(expand('%')) | bdelete!

" Strip file whitespace before saving
autocmd BufWritePre * :keeppatterns %s/\s\+$//e

" optional reset cursor on start: #doesn't work with alfred
"augroup myCmds
"  autocmd!
"  autocmd VimEnter * silent !echo -ne "\e[2 q"
"augroup END

" Normally you can open a url with gx, doesnt work so use <leader>u
" Hint, can also open files with gf
function! HandleURL()
  let s:uri = matchstr(getline('.'), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri !=# ''
    silent exec "!open '".s:uri."'"
  else
    echo 'No URI found in line.'
  endif
  redraw!
endfunction
map <leader>u :call HandleURL()<cr>

" Restore cursor position horizontally when switching buffer
" Switching tabs this is weird??
"autocmd BufEnter * silent! normal! g`"

" A few personal aliases that make editing certain files easier
command Notes :n ~/Dropbox/Notes/Notes.md ~/Dropbox/Notes/* ~/Dropbox/Documents/twitter/*.md

nnoremap <leader>nn :Notes<cr>
nnoremap <leader>nd :tabe<cr>:lcd ~/ws/dotfiles<cr>:n ~/ws/dotfiles/.sharedshrc<cr>
nnoremap <leader>nv :tabe<cr>:lcd ~/<cr>:n ~/.vimrc<cr>

" clear auto commands with !au (if you want) and reload vim, can use RestartVim in MacVim?
command Reload :au! | so ~/.vimrc

" Close all except current buffer
" https://stackoverflow.com/questions/4545275/vim-close-all-buffers-but-this-one
command BufOnly :%bd|e#

" https://stackoverflow.com/questions/19430200/how-to-clear-vim-registers-effectively
function ClearReg()
  let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
  for r in regs
    call setreg(r, [])
  endfor
endfunction
command! ClearReg :call ClearReg()

function! s:CopyGitPath() range
  execute 'silent !printf "\%s\#n' . a:firstline . '" "$(git ls-tree --name-only --full-name HEAD %)" | pbcopy'
  redraw!
endfunction

nnoremap <Leader>ygp :call <SID>CopyGitPath()<CR>

" ---------------------------------------- From Damian Conway
" https://github.com/ninrod/damian_conway_oscon_2013_tarball
" Color column 80th column
"highlight ColorColumn ctermbg=magenta
"call matchadd('ColorColumn', '\%81v', 100)

" EITHER the entire 81st column, full-screen...
highlight ColorColumn ctermbg=magenta
set colorcolumn=+1


" ---------------------------------------- Stuff I don't really understand

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if ! exists("g:leave_my_cursor_position_alone") |
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \ exe "normal g'\"" |
  \ endif |
\ endif

" Comparing the file with what's saved on disk for conflicts
" From https://www.reddit.com/r/vim/comments/2rnraa/indicator_if_a_saved_file_has_changed/
" Press \d to diff buffer with saved file
" Not used:
" - https://vi.stackexchange.com/questions/1971/is-it-possible-to-have-the-output-of-a-command-in-a-split-rather-than-the-who
"   - creates a command RSplit with explicit commands
" - https://stackoverflow.com/questions/3619146/vimdiff-two-subroutines-in-same-file
"   - Diff two buffers
" - https://github.com/AndrewRadev/linediff.vim
"   - Specify two blocks to diff
function! s:DiffGitWithSaved()
  " Current file full path, see :help filename-modifiers
  let filename = expand('%:p')
  let diffname = tempname()
  execute 'silent w! '.diffname
  " Horizontal split (perhaps quickfix window is better?)
  new
  " No more "+" on the file name, won't ask for saving on exit
  setlocal buftype=nowrite
  " eval a string as vimscript, '0read' reads the following command, '!' runs
  " shell, git diff no index -- does a diff (not sure why git, doesn't need
  " it, then the two files, one is saved as a temporary file, then || true
  " makes the exit code 0 so that it doesn't print a weird thing
  execute '0read !git diff --no-index -- '.shellescape(filename).' '.diffname.' 2> /dev/null || true'
  setf diff
endfunction
com! DiffGitSaved call s:DiffGitWithSaved()
nmap <leader>d :DiffGitSaved<CR>

" -------------------------------- REPL + code execution
if !empty(glob("~/.vimrc-repl"))
  so ~/.vimrc-repl
endif

" -------------------------------- My own links plugin
" Should eventually superseed: knsh14/vim-github-link
if !empty(glob("~/.vimrc-links"))
  so ~/.vimrc-links
endif

" ---------------------------------------- plugin settings
"set shortmess-=F
autocmd BufReadPost * if getfsize(@%) > 10000 | execute('NoMatchParen') | endif
"let g:loaded_matchparen=1

call plug#begin()
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'altercation/vim-colors-solarized'
"autocmd BufReadPost <buffer> hi MatchParen cterm=bold,underline ctermbg=none ctermfg=red
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_extensions = []
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#branch#empty_message='no repo'
let g:airline_theme='solarized'


" ======= Hooks
Plug 'airblade/vim-gitgutter'
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

Plug 'svermeulen/vim-yoink'
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)
nmap [y <plug>(YoinkRotateBack)
nmap ]y <plug>(YoinkRotateForward)
nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
" Preserve yank position
nmap y <plug>(YoinkYankPreserveCursorPosition)
xmap y <plug>(YoinkYankPreserveCursorPosition)
" :Yanks
" Consider using 3[y when going back to the third on the list for example

" Highlights current match with ErrorMsg
Plug 'PeterRincker/vim-searchlight'

" From Damian Conway
Plug 'schoettl/listtrans.vim'
" ;l toggles between bulleted list and text with commas and the last one has
" ', and'
" If there are already commas in our list, use semicolons
" If not using and, but say "but not", then append to penultimate item
nnoremap ;l   :call ListTrans_toggle_format()<CR>
vnoremap ;l   :call ListTrans_toggle_format('visual')<CR>

" From Damian Conway
Plug 'nixon/vim-vmath'
vmap <expr>  ++  VMATH_YankAndAnalyse()
nmap         ++  vip++
" Visually select numbers, then press ++
" "ap for average for example (see status line underlines for registers)

Plug 'vifm/vifm.vim'

Plug 'tpope/vim-dispatch'
" Use :Dispatch <run test/build cmd> (or :Make but that's make specific?)
" :Focus <cmd> to pin a command so that you can just call :Dispatch without
" args everytime, :Dispatch! for background running, show output with :Copen

Plug 'tpope/vim-fugitive'
" Move between changes with [c and ]c
" Move files with :Gmove <c-r>%

Plug 'NLKNguyen/pipe.vim'

"Plug 'craigemery/vim-autotag'
" https://github.com/craigemery/vim-autotag/issues/34
let g:autotagStartMethod='fork'
" Requires python support, but refreshes ctags if it's there
" More info on tags generally:
" https://andrew.stwrt.ca/posts/vim-ctags/
" <c-x><c-]> for tag completion
" <c-]> go to first match
" g<c-]> got to match if only one, else, show list
" g] show list of tags

Plug 'tpope/vim-sleuth'
" Indentation detection

Plug 'osyo-manga/vim-anzu' " show search progress
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
"nmap * <Plug>(anzu-star-with-echo)
"nmap # <Plug>(anzu-sharp-with-echo)
" https://vim.fandom.com/wiki/Searching#Case_sensitivity
nnoremap <silent> <Plug>(StarCaseSensitive) /\<<C-R>=expand('<cword>')<CR>\>\C<CR>
nnoremap <silent> <Plug>(SharpCaseSensitive) ?\<<C-R>=expand('<cword>')<CR>\>\C<CR>
nmap * <Plug>(anzu-star)N<Plug>(StarCaseSensitive)<Plug>(anzu-echo-search-status)
nmap # <Plug>(anzu-sharp)N<Plug>(SharpBackwardsCaseSensitive)<Plug>(anzu-echo-search-status)

" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
" Show in search status - will override file name so kinda meh
"let g:airline_section_c='%{anzu#search_status()}'

"Plug 'Valloric/MatchTagAlways'
" Show closing tag
let g:mta_filetypes = {
\ 'html' : 1,
\ 'xhtml' : 1,
\ 'xml' : 1,
\ 'jinja' : 1,
\ 'typescript' : 1,
\ 'typescript.tsx' : 1,
\ 'javascript' : 1,
\ 'javascript.jsx' : 1,
\ 'typescriptreact' : 1,
\}
nnoremap <leader>% :MtaJumpToOtherTag<cr>

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
let g:session_autosave = 'yes'
let g:session_autoload = 'no'
let g:session_default_overwrite = 1
" Basically you just care about :OpenSession, don't worry about anything else
" Sometimes you need to worry about :DeleteSession

Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }
if exists('g:started_by_firenvim')
  let g:firenvim_config = {
  \  'localSettings': {
  \    '.*': {
  \      'takeover': 'never',
  \    },
  \  }
  \}
  au BufEnter github.com_*.txt set filetype=markdown
  function RunOnFirenvim(timer)
    setl guifont=Monaco:h20
    set background=dark
    colorscheme tokyonight
    setl laststatus=0
  endfunction
  "au CursorHold *.* call RunOnFirenvim()
  au BufEnter *.* call timer_start(100, function("RunOnFirenvim"))
endif

" === Commands and functions
Plug 'knsh14/vim-github-link'
nnoremap <Leader>yg :GetCommitLink<CR>

Plug 'PeterRincker/vim-argumentative'
" <, or >, for move argument left or right

" Plug 'terryma/vim-multiple-cursors'

Plug 'junegunn/vim-easy-align'
xmap ga <Plug>(EasyAlign)
" vipga= " Visual Inner Paragraph (ga) align =
" Visually select what you want to align, `g``a``=` to align on equals sign

Plug 'tpope/vim-unimpaired'
" I only download this for the conflict mapping ]n and [n

Plug 'tpope/vim-projectionist'
let g:projectionist_heuristics = {
  \ "package.json": {
  \    "src/*.tsx": {
  \      "alternate": "src/{}.module.css",
  \      "type": "source",
  \    },
  \    "src/*.module.css": {
  \      "alternate": "src/{}.tsx",
  \      "type": "css",
  \    }
  \  }
  \}
nnoremap <leader>ps :Esource<cr>
nnoremap <leader>pt :Etest<cr>
nnoremap <leader>pc :Ecss<cr>

Plug 'tpope/vim-abolish'
" crs - coerce_snake_case
" crm - MixedCase
" crc - camelCase
" cru - UPPER_CASE
" cr- - dash-case
" cr. - dot.case
" cr<space> - space case
" crt - Title Case
" :%Subvert/facilit{y,ies}/building{,s}/g

Plug 'FooSoft/vim-argwrap'
" Pointless given prettier, but can be useful?
nnoremap <silent> <leader>aw :ArgWrap<CR>

Plug 'bronson/vim-visual-star-search'
" Use * in visual mode

Plug 'tpope/vim-surround'
" cs'" - for change existing
" dst - for delete surrounding tags
" ysiw] - for insert no space square bracket, use `[` for with space
" ysiw<em> - for insert tags
" <VISUAL> S<p class="important"> - insert p tag around
" See issue: https://github.com/tpope/vim-surround/issues/276
nmap ysa' ys2i'
nmap ysa" ys2i"
nmap ysa` ys2i`

Plug 'tommcdo/vim-exchange'
" visual: X to select text to swap, same on the text to swap with
" cxc to cancel

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
" gc to comment

"Plug 'vim-scripts/ReplaceWithRegister' "griw to replace inner word with register

Plug $HOMEBREW_PREFIX . '/opt/fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '50%' }
" https://github.com/junegunn/fzf/blob/master/README-VIM.md
noremap <leader><Tab> :Buffers<CR>
nmap <Leader>t :Files<CR>
"nmap <Leader><leader>r :BTags<CR>
"nmap <Leader><Leader>t :Tags<CR>
" https://github.com/junegunn/fzf.vim/issues/360
nnoremap <silent> <Leader><Leader>ts :QFiles <C-R>=expand('%:h')<CR><CR>
nnoremap <silent> <Leader><Leader>tr :Files <C-R>=expand('%:h')<CR><CR>
nnoremap <silent> <Leader><Leader>tt :Files <C-R>=trim(system('git rev-parse --show-toplevel'))<CR><CR>
nnoremap <Leader>/ :Rg <C-R><C-W>
nnoremap <Leader>* :Rg <C-R><C-W><CR>
vnoremap <Leader>/ y:Rg \b<C-R>0\b<CR>
nnoremap <Leader>: :History:<CR>
nnoremap <Leader>h/ :History/<CR>

" Custom setup for previews on Rg and Files
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\   'rg --hidden --column --line-number --no-heading --color=always --smart-case --glob "!tags" --glob "!.git" '.shellescape(<q-args>), 1,
\   fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* Ripgrep
\ call fzf#vim#grep(
\   'rg --hidden --column --line-number --no-heading --color=always --smart-case --glob "!tags" --glob "!.git" '.<q-args>, 1,
\   fzf#vim#with_preview(), <bang>0)

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)
" Same command just moved q args so that the local file query sticks around
" https://github.com/junegunn/fzf.vim/issues/538
command! -bang -nargs=? -complete=dir QFiles
  \ call fzf#vim#files('', fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline', '--query', <q-args>]}), <bang>0)
" https://github.com/junegunn/fzf.vim/issues/800#issuecomment-533801609
" Sorting issue: https://github.com/junegunn/fzf.vim/pull/620
" !i$ for imports - mainly python
command! -bang BTags
\ call fzf#vim#buffer_tags('!i$ '.<q-args>, {
\   'down': '40%',
\   'options': '
\     --with-nth 1,4
\     --nth 1,2
\     --delimiter "\t"
\     --reverse
\     --preview-window="70%"
\     --preview "
\       tail -n +\$(echo {3} | tr -d \";\\\"\") {2} |
\       head -n 16 |
\       bat -l '.expand('%:e').' --color=always --decorations=never
\     "
\   '
\ })
command! -bang Tags
\ call fzf#vim#tags(<q-args>, {
\   'down': '40%',
\   'options': '
\     --with-nth 1..2
\     --reverse
\     --preview "
\       tail -n +\$(echo {3} | tr -d \";\\\"\") {2} |
\       head -n 16 |
\       bat -l '.expand('%:e').' --color=always --decorations=never
\     "
\   '
\ })
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
" https://github.com/junegunn/fzf
" sbtrkt	fuzzy-match	Items that match sbtrkt
" 'wild	exact-match (quoted)	Items that include wild
" ^music	prefix-exact-match	Items that start with music
" .mp3$	suffix-exact-match	Items that end with .mp3
" !fire	inverse-exact-match	Items that do not include fire
" !^music	inverse-prefix-exact-match	Items that do not start with music
" !.mp3$	inverse-suffix-exact-match	Items that do not end with .mp3

Plug 'easymotion/vim-easymotion'
" Mainly use this to search
" <leader>f<char>
" <leader><leader>f<char><char>
map  <Leader>f <Plug>(easymotion-s)
"map  <Leader>f <Plug>(easymotion-f)
"nmap <Leader>f <Plug>(easymotion-overwin-f)
"map  <Leader>F <Plug>(easymotion-F)
map  <Leader><leader>f <Plug>(easymotion-s2)
let g:EasyMotion_do_mapping = 0

Plug 'tpope/vim-vinegar' " Making netrw file management easier
"nnoremap - :Tex <cr>
" `-` to jump in
" `y``.` to yank absolute path
" `~` to go home
" `ctrl``shift``6` to go back to editing (doesn't work for me, just use :bd)
" `.` to auto prepopulate `:` command with file, `!` for shell:
" e.g. `!chmod +x` for `:!chmod +x path/to/file`

"Plug 'jalvesaq/vimcmdline'
" vimcmdline mappings (local leader is \\)
" let cmdline_map_start          = '<LocalLeader>s'
" let cmdline_map_send           = '<LocalLeader><Space>'
" let cmdline_map_send_and_stay  = '<LocalLeader><Space>'
" let cmdline_map_source_fun     = '<LocalLeader>f'
" let cmdline_map_send_paragraph = '<LocalLeader>p'
" let cmdline_map_send_block     = '<LocalLeader>b'
" let cmdline_map_quit           = '<LocalLeader>q'
" let cmdline_app = {
"   \  'typescript': 'npx ts-node -T',
"   \}

Plug 'majutsushi/tagbar'
" Kinda works for python, not really working for typescript
" See the following for ctag setups per file type
" https://github.com/majutsushi/tagbar/wiki#typescript
let g:tagbar_type_typescript = {
  \ 'ctagstype': 'typescript',
  \ 'kinds': [
    \ 'c:classes',
    \ 'n:modules',
    \ 'f:functions',
    \ 'v:variables',
    \ 'v:varlambdas',
    \ 'm:members',
    \ 'i:interfaces',
    \ 'e:enums',
  \ ]
\ }
nnoremap <leader>o :TagbarToggle<cr>
"autocmd VimEnter * nested :call tagbar#autoopen(1)

" === Text objects
Plug 'wellle/targets.vim'
" changes behaviour to also perform seeking so you don't need to wory as much about cursor
" placement. Doesn't work in comments
" da, - delete in comma
" daa - delete in argument
" cin) - change in next parens, doesn't need to be inside
" cil) - change in last parens, doesn't need to be inside

"Plug 'bkad/CamelCaseMotion'
let g:camelcasemotion_key = ','
" Use , as camel case word object: i.e. ci,w

"Plug 'vim-scripts/argtextobj.vim'
" Adds argument (a) so caa, cia
" func(a, b[asdf]) -> func(a, .) or -> func(a) (inner or outer)

Plug 'michaeljsmith/vim-indent-object'
" Key bindings	Description
" <count>ai	An Indentation level and line above.
" <count>ii	Inner Indentation level (no line above).
" <count>aI	An Indentation level and lines above/below.
" <count>iI	Inner Indentation level (no lines above/below).

"Plug 'christoomey/vim-sort-motion' "sort with gsip

" === Language specific
" Before polyglot overrides it
Plug 'nkouevda/vim-thrift-syntax'
"Plug 'sheerun/vim-polyglot'
"let g:polyglot_disabled = ['mathematica', 'sh']
" autocmd chaining: https://vi.stackexchange.com/questions/3968/is-there-a-way-to-and-events-in-the-autocmd
"autocmd FileType markdown autocmd BufReadPost,CursorHold <buffer> set conceallevel=0
let g:vim_markdown_new_list_item_indent = 0
" Shrink :Toc to size
let g:vim_markdown_toc_autofit = 1
" Don't do more than one line emphasis (in review)
let g:vim_markdown_emphasis_multiline = 0
" Because python inside triggers conceallevel 2 - jedi sets conceal level, so set it back for markdown files
let g:vim_markdown_conceal = 0
" Use "ge" for following links
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_anchorexpr = 'substitute(v:anchor, "-", " ", "g")'
" <leader>o for show toc
autocmd FileType markdown nnoremap <buffer> <leader>o :Toc<cr>
autocmd BufNewFile,BufRead *.plist set syntax=xml
autocmd BufNewFile,BufRead *.sharedshrc set ft=sh
" https://superuser.com/questions/489135/vim-does-not-detect-syntax-of-ssh-config
autocmd BufNewFile,BufRead */.ssh/config  setf sshconfig

Plug 'dbridges/vim-markdown-runner'
autocmd FileType markdown nnoremap <buffer> <Leader>r :MarkdownRunner<CR>
autocmd FileType markdown nnoremap <buffer> <Leader>R :MarkdownRunnerInsert<CR>

Plug 'godlygeek/tabular'
" Necessary for vim-markdown TableFormat

Plug 'dhruvasagar/vim-table-mode'
" :TableModeToggle - ,tm
" :TableModeRealign - ,tr
" || for horizontal rule
" :Tableize - <Leader>tt to convert csv to table (:Tableize/\t for tsv)
" [|, ]|, {| & }| for moving left right up down
" <Leader>tdc delete column
" <Leader>tic or <Leader>tiC to insert a column
" :TableAddFormula or <Leader>tfa
" :TableEvalFormulaLine or <Leader>tfe or <Leader>t? for eval
let g:table_mode_map_prefix = ',t'

" Plugins for org mode (disabled cause GetOrgFolding() is extremely slow)
"Plug 'inkarkat/vim-SyntaxRange'
"Plug 'tpope/vim-speeddating'
"Plug 'jceb/vim-orgmode'

" Plug 'arecarn/vim-fold-cycle'
"Current mappings
"nmap <CR> <Plug>(fold-cycle-open)
"nmap <BS> <Plug>(fold-cycle-close)

Plug 'mzlogin/vim-markdown-toc'
let g:vmt_list_item_char='-'
" :GenTocGFM

Plug 'romainl/vim-devdocs'
" :DD source name
" If not for the language

Plug 'davidhalter/jedi-vim'
silent! python3 1==1 # Random hack that makes python3 work
" We change these to be similar to tsuquyomi
let g:jedi#goto_command = '<C-]>'
"let g:jedi#goto_assignments_command = ""
let g:jedi#goto_definitions_command = '<C-}>'
let g:jedi#documentation_command = 'K'
let g:jedi#usages_command = '<leader>n'
let g:jedi#completions_command = '<C-x><C-o>'
let g:jedi#rename_command = '<leader>r'
let g:jedi#popup_select_first = 0
autocmd FileType python nnoremap <buffer> <leader>b :cclose<cr>

Plug 'tell-k/vim-autoflake'
" :Autoflake to remove unused imports
let g:autoflake_remove_unused_variables=0
let g:autoflake_remove_all_unused_imports=1
"autocmd FileType python autocmd BufWritePre <buffer> Autoflake
let g:autoflake_disable_show_diff=1
command! Aflake :call Autoflake() | redraw!

" Warning, need to use Augroup soon
" https://stackoverflow.com/questions/10969366/vim-automatically-formatting-golang-source-code-when-saving/10969574

"Plug 'ayroblu/python-imports.vim'
" Use :ImportName, also ~/.vim/python-imports.cfg
autocmd FileType python nnoremap <buffer> <leader>i :ImportName<cr>

Plug 'w0rp/ale'
"autocmd FileType typescript,typescript.jsx let g:ale_linters = findfile('.eslintrc', '.;') != '' ? {'typescript': ['eslint']} : {'typescript': []}
autocmd FileType typescript,typescriptreact let b:ale_linters = []
autocmd FileType javascript let b:ale_linters_ignore = ['tsserver']
" Enable ale for things coc doesn't support yet
autocmd FileType vim,javascript nmap <silent> ]j :ALENextWrap<cr>
autocmd FileType vim,javascript nmap <silent> [j :ALEPreviousWrap<cr>
"\ 'typescript': ['tslint', 'eslint', 'prettier'],
"\ 'typescriptreact': ['tslint', 'eslint', 'prettier'],
"\ 'javascript': ['eslint', 'prettier'],
"\ 'css': ['prettier'],
"\ 'json': ['prettier'],
"\ 'scala': ['scalafmt'],
" Still use ale for python
" ALE uses prettier only if it's installed - preferred for markdown
" ALE Fixers are slow compared to Coc, use sparingly
let g:ale_fixers = {
\ 'typescript': [],
\ 'typescriptreact': [],
\ 'javascript': [],
\ 'css': [],
\ 'python': ['isort'],
\ 'terraform': ['terraform'],
\ 'scala': ['scalafmt'],
\}
"\ 'markdown': ['prettier'],
let g:ale_pattern_options = {
\   '.*\.json$': {'ale_enabled': 0},
\   '.*\.graphql$': {'ale_enabled': 0},
\}
let g:ale_fix_on_save = 1
"let g:ale_javascript_prettier_use_local_config = 1
" Disable the loclist (just annoying right now) can be opened with :lopen
let g:ale_open_list=0

" Rust vim specific
" http://seenaburns.com/vim-setup-for-rust/
"  - Cleaner
" https://about.okhin.fr/2018/08/03/my-vim-setup-with-some-rust-specifities/
"  - more ide
" https://asquera.de/blog/2017-03-03/setting-up-a-rust-devenv/
"  - vscode
" let g:rustfmt_autosave = 1
" autocmd FileType rust let b:ale_linters = {'rust': ['rls']}
" autocmd FileType rust nnoremap <buffer> <leader>e :RustRun<cr>
"au BufNewFile,BufReadPost *.md set filetype=markdown

Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
" Due to a bug in colorscheme and lack of releases, use master
"-Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Hopefully this will replace ale and some of the others
let g:coc_global_extensions = [
      \'coc-metals',
      \'coc-tsserver',
      \'coc-prettier',
      \'coc-json',
      \'coc-vimlsp',
      \'coc-flow',
      \'coc-rls',
      \'coc-go',
      \'coc-sourcekit',
      \'coc-yaml',
      \'coc-css'
      \]
      "\'coc-graphql',
      "\"coc-python',
" vscode + coc config uses jsonc
" https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file
autocmd FileType json syntax match Comment +\/\/.\+$+
" https://github.com/neoclide/coc-json/issues/11
" tsconfig.json is actually jsonc, help TypeScript set the correct filetype
autocmd BufRead,BufNewFile tsconfig.json set filetype=jsonc

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
"inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"                            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <c-x><c-o> coc#refresh()
" Checkout the following as <c-space> is interpreted as <c-@>
" https://stackoverflow.com/questions/24983372/what-does-ctrlspace-do-in-vim
inoremap <silent><expr> <c-@> coc#refresh()
inoremap <silent><expr> <c-space> coc#refresh()
" Use `[[` and `]]` to navigate diagnostics
nmap <silent> [[ <Plug>(coc-diagnostic-prev)
nmap <silent> ]] <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> <c-w>gd :call CocAction('jumpDefinition', 'drop')<CR>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup supporteddefs
  autocmd!
  " "Workspaces for different file types, defaults to []
  autocmd FileType scala let b:coc_root_patterns = [".git"]

  " Update signature help on jump placeholder. - have no clue what this does
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup END

" Introduce function and class text objects
" " NOTE: Requires 'textDocument.documentSymbol' support from the language
" server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" https://github.com/neoclide/coc.nvim/issues/349
let s:coc_denylist = ['markdown']
function! s:disable_coc_for_type()
  if index(s:coc_denylist, &filetype) != -1
    let b:coc_enabled = 0
  endif
endfunction
augroup CocGroup
  autocmd!
  autocmd BufNew,BufEnter * call s:disable_coc_for_type()
augroup end

Plug 'antoinemadec/coc-fzf'
" :CocFzfList
" :CocFzfList diagnostics
" :CocFzfListResume (same as last fzf)

augroup typescriptreact
  autocmd!
  autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
augroup END

call plug#end()

" ---------------------------------------- plugin after setups
lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- One of "all", "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = {"javascript", "typescript", "tsx", "graphql", "markdown"},

  -- Install languages synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- List of parsers to ignore installing
  ignore_install = {},

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- list of language that will be disabled
    disable = {},

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()

"function! GetLongestLineLength()
"  let maxlength   = 0
"  let linenumber  = 1
"  while linenumber <= line("$")
"    exe ":".linenumber
"    let linelength  = virtcol("$")
"    if maxlength < linelength
"      let maxlength = linelength
"    endif
"    let linenumber  = linenumber+1
"  endwhile
"endfunction
"
"autocmd BufReadPost * if GetLongestLineLength() > 5000 | execute('TSBufDisable highlight') | endif
" autocmd BufReadPost * if getfsize(@%) > 100000 | execute('TSBufDisable highlight') | endif

" ---------------------------------------- Finally colour scheme
if exists('g:started_by_firenvim')
  set background=dark
  silent! colorscheme tokyonight
else
  set background=light
  silent! colorscheme solarized
endif
hi Normal ctermbg=NONE

" https://github.com/airblade/vim-gitgutter/issues/696
hi! link SignColumn LineNr

" overwrite colour scheme for folds
highlight Folded ctermfg=brown

" Disable unsafe commands in project specific vimrc's
set secure

