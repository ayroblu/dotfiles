[user]
  name = Ben Lu
  email = ayroblu@gmail.com
[merge]
  tool = vimdiff
[color]
  ui = true
# [color "diff"]
#   meta = blue
  # https://stackoverflow.com/questions/26941144/how-do-you-customize-the-color-of-the-diff-header-in-git-diff
  #new = "#55ee55 green bold"
[alias]
  alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
  # To checkout a file from another branch, git co <branch> -- file
  # To show a file from another branch, git show <branch>:file
  #
  # https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit

  # To amend an older commit: https://stackoverflow.com/questions/3103589/how-can-i-easily-fixup-a-past-commit
  # git commit -a --fixup 1edb09da623
  # git rebase -i --autosquash origin/master
  # OR:
  # git stash                      # temporarily put my work aside
  # git rebase -i <bad_commit>~1   # rebase one step before the bad commit
  #                                # mark broken commit for editing
  # vim <affected_sources>         # fix the bug
  # git add <affected_sources>     # stage fixes
  # git commit -C <bad_commit>     # commit fixes using same log message as before
  # git rebase --continue          # base all later changes onto this

  # Merge conflict for generated files: `git co --theirs .`
  # Also consider --ours, and `git r -X theirs`

  amend = commit -a --amend --no-edit
  abandon = !BRANCH=`git rev-parse --abbrev-ref HEAD` && git reset --hard && git checkout $(git mainmaster) && git branch -D $BRANCH
  # get main branch
  #bm = !git remote show upstream | grep "HEAD branch" | sed 's/.*: //'
  #bm = symbolic-ref --short HEAD

  b = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  base = !git merge-base HEAD $(git upstream)
  # Branch Name
  bn = rev-parse --abbrev-ref HEAD
  # Include remote branches
  bo = for-each-ref --sort=committerdate refs/heads/ refs/remotes/origin/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  # bo no formatting (for deleting old ones
  boq = for-each-ref --sort=committerdate refs/remotes/origin/ --format='%(refname:lstrip=-1)'
  # Local branches
  bl = log --branches --oneline --no-walk --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr - %cd) %C(bold blue)<%an>%Creset'
  # All remote branches
  blo = !git for-each-ref --sort=committerdate refs/heads/ refs/remotes/origin/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  # To clean everything
  cfd = clean -fd
  ci = commit -am
  cm = commit -m
  co = checkout
  # git cherry-pick A^..B # A to B inclusive
  # git cod 'Dec 25 2018'
  cod = !"f() { echo git checkout `git rev-list -1 --before=\"$1\" --first-parent $(git upstream)`; }; f"
  # checkout original
  coo = "!git checkout $(git mb)"
  count-lines = "! git log --author=\"$1\" --pretty=tformat: --numstat $2 | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' #"

  # only works on git repos that you cloned
  default = !"basename $(git symbolic-ref --short refs/remotes/origin/HEAD)"

  d = diff
  dbase = "!f() { git diff $(git merge-base HEAD \"$@\");}; f"
  diff-name = !git diff $(git merge-base HEAD origin/$(git mainmaster)) --diff-filter=d --name-only | xargs
  ds = diff --staged
  dh = diff HEAD
  dt = difftool
  # Diff upstream
  #du = !git diff $(git merge-base HEAD $(git upstream))...HEAD
  # Why did I need the git prefix? Must have a reason
  #du = "!cd \"${GIT_PREFIX:-.}\"; git diff $(git merge-base HEAD $(git upstream))...HEAD"
  du = "!git diff $(git merge-base HEAD $(git upstream))"
  dus = du --stat
  dm = "!git diff $(git merge-base HEAD origin/$(git mainmaster))"
  #du = "!f() { git diff $(git merge-base HEAD $(git upstream)) \"$@\"; }; f"
  dw = d --color-words
  dc = d --color-words=.
  # Delete push
  dp = !git push -d origin $(git rev-parse --abbrev-ref HEAD) && git p
  f = fetch
  fo = !git fetch origin
  fou = !"git fetch origin && git branch -f $(git mainmaster) origin/$(git mainmaster)"
  is-sparse = config --get core.sparseCheckout
  last-message = log -1 --pretty=%B
  lbase = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr - %cd) %C(bold blue)<%an>%Creset'
  l = lbase --graph -500
  ls = l --stat
  ll = ls -10 -U0
  la = lbase --all
  laa = lbase --all --author-date-order --author='Ben Lu'
  lf = l --first-parent
  lfs = l --first-parent --stat
  # -c shows merge commit diff too
  lfsc = l -c --first-parent --stat
  llfsc = ll -c --first-parent --stat
  #lfa = lf --author-date-order  --no-merges
  mb = !git merge-base HEAD $(git upstream)

  mainmaster = !"git branch --format='%(refname:short)' | rg '^(main|master)$'"

  m = merge --no-ff
  mt = mergetool
  # New branch
  new = !"git checkout origin/$(git mainmaster) -b"
  newdep = checkout -t HEAD -b
  upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
  p = push origin HEAD
  pr = pull --rebase
  # Removes deleted branches from cache: https://stackoverflow.com/questions/32147093/git-delete-remotes-remote-refs-do-not-exist
  pbranch = fetch -p origin
  pf = push -f origin HEAD
  pt = push --tags origin HEAD
  pu = push -u origin HEAD
  root = rev-parse --show-toplevel
  r = rebase
  ra = rebase --abort
  rbi = !git rebase -i $(git mb)
  rc = rebase --continue
  rs = restore --staged
  rsw = restore --staged --worktree
  # https://git-scm.com/book/en/v2/Git-Tools-Searching -L line log search is way more powerful
  searchlog = log -p -G
  s = status
  ss = status -uno
  si = status --ignored

  # Source log commands if your git is slow
  slog = log --no-decorate
  sl = slog --oneline
  sls = sl --stat
  sll = sls -U0

  # Submodule fixes
  su = submodule update --init --recursive

  #squash = !git rebase -i $(git merge-base HEAD origin/$(git bm))
  squash = "!f(){ git reset --soft ${1:-$(git mb)} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
  #squashrebase = !git squash && git rebase origin/$(git bm)
  tc = rev-list -n 1
  tracking = rev-parse --abbrev-ref --symbolic-full-name @{u}

  # From https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

  # Delete old branches
  dell = "!git branch --merged | egrep -v '(^\\*|main|master|dev)' | xargs git branch -d"
  delo = "!git branch -r --merged | grep -v 'master|main' | sed 's/origin\\///' | xargs git push --delete origin"

[core]
  pager = less $LESS
  excludesfile = ~/.gitignore_global
[push]
  default = matching

# git reset HEAD~
# git push -f origin HEAD^:master
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[diff]
  tool = vimdiff
  # Default true
  renames = true
[mergetool]
  keepBackup = false
  # https://git-scm.com/docs/vimdiff
  # default
  #layout = "(LOCAL,BASE,REMOTE)/MERGED"
[mergetool "vimdiff"]
  layout = "MERGED"
[rerere]
  enabled = true
[fetch]
  prune = true
[http]
  postBuffer = 524288000
[init]
  defaultBranch = main

# from delta page
[core]
  pager = delta
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true  # use n and N to move between diff sections
  line-numbers = true
  side-by-side = true
  theme = Solarized (light)
[merge]
  conflictstyle = diff3
[diff]
  colorMoved = default

